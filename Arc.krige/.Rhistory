?gstat
??gstat
?krige
??krige
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
load("D:/Back_up_shankar/R-programng/San-package/San-package/pro.mot/.RData")
install.packages("devtools")
install.packages("roxygen")
install.packages("roxygen2")
library(Arc.krige)
?Arc.krige
??Arc.krige
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(devtools)
library(Arc.krige)
install_github("devtools","hadley")
library(Arc.krige)
library(help = Arc.krige)
?Arc.krige
library(Arc.krige)
library(help = Arc.krige)
Arc.krige::tool_exec()
Arc.krige::tool_exec
?Arc.krige::tool_exec
??Arc.krige::tool_exec
library(Arc.krige)
library(help = Arc.krige)
?Arc.krige::tool_exec
??Arc.krige::tool_exec
?Arc.krige
??Arc.krige
library(Arc.krige)
library(Arc.krige)
?Arc.krige
?Arc.krige::tool_exec
library(Arc.krige)
library(Arc.krige)
library(MiKTeX)
library(PDF)
install.packages("PDF")
library(Arc.krige)
?tool_exec
?tool_exec
library(Arc.krige)
?Arc.krige::tool_exec
?Arc.krige::tool_exec
library(Arc.krige)
?Arc.krige::tool_exec
library(Arc.krige)
?Arc.krige::tool_exec
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(help = Arc.krige)
library(help = gstat)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
arc.check_product()
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
arc.check_product()
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
plot(d)
class(d)
simulate(san)
longleaf
data(longleaf)
library(spatstat)
library(raster)
data(longleaf)
longleaf
plot(longleaf)
marks(longleaf)
class(longleaf)
san=density(longleaf, sigma = 0.9)
plot(san)
san=density(longleaf, sigma = 9)
plot(san)
simulate(san)
simulate(expression(rpoispp(san)))
sanp = ppm(san)
sanp = ppm(longleaf)
unmarks(longleaf)
unmark(longleaf)
sa= unmark(longleaf)
sanp = ppm(sa)
sanp
sanp = ppm(sa,~1)
simulate(sanp)
plot(simulate(sanp))
sanp
san
plot(san)
plot(sa)
plot(simulate(sanp))
simulate.ppm(sa)
simulate(sa)
class(sa)
data(bronzefilter)
X <- unmark(bronzefilter)
K <- Kscaled(X)
fit <- ppm(X, ~x)
lam <- predict(fit)
K <- Kscaled(X, lam)
plot(K)
plot(lam)
plot(fit)
plot(fit,echo = F)
plot(fit,ask = F)
library(spatstat)
library(raster)
data(longleaf)
class(longleaf)
san = longleaf
rm(longleaf)
sand = density(san)
sand
plot(sand)
plot(san)
class(sand)
plot(sand)
sandd = density.ppp(san)
plot(sandd)
plot(sandd)
plot(sand)
plot(sandd)
class
class(sandd)
rm(sandd)
sand
as.ppp(sand)
library(Arc.krige)
arc.check_product()
tools::showNonASCII( readLines("~/tool_exec.Rd"))
tools::showNonASCII( readLines("C:\Users\Shankar\Desktop\SEM-2\Githb\R_GIS\Arc.krige\man/tool_exec.Rd"))
tools::showNonASCII( readLines("C:\users\Shankar\Desktop\SEM-2\Githb\R_GIS\Arc.krige\man/tool_exec.Rd"))
tools::showNonASCII( readLines("~/tool_exec.Rd"))
tools::showNonASCII( readLines("C:/Users/Shankar/Desktop/SEM-2/Githb/R_GIS/Arc.krige/man/tool_exec.Rd"))
library(Arc.krige)
library(tools)
library(devtools)
document("Arc.krige")
document(Arc.krige)
document(.)
reoxygenise()
roxygenise()
library(roxygen2)
roxygenise()
library(Arc.krige)
library(Arc.krige)
arc.check_product()
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
arc.check_product()
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
arc.check_product()
library(Arc.krige)
arc.check_product()
library(Arc.Ordkrige)
arc.check_product()
library(Arc.krige)
arc.check_product()
library(Arc.krige)
Arc.krige::tool_exec()
?Arc.krige::tool_exec
library(Arc.krige)
?Arc.krige::tool_exec
library(Arc.krige)
library(Arc.krige)
?Arc.krige::tool_exec
?gstat
?gstat::krige
?Arc.krige::tool_exec
library(Arc.krige)
load_all(Arc.krige)
library(sp)
library(base)
??load_all
library(devtools)
load_all(Arc.krige)
load_all("Arc.krige")
getwd()
setwd("C:/Users/Shankar/Desktop/SEM-2/Githb/R_GIS")
load_all("Arc.krige")
run_examples("Arc.krige")
library(Arc.krige)
arc.check_product()
run_examples("Arc.krige")
load_all("Arc.krige")
run_examples("Arc.krige")
arc.check_product()
library(Arc.krige)
arc.check_product()
arc.check_product()
arc.check_product()
load_all("Arc.krige")
run_examples("Arc.krige")
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
?Arc.krige::tool_exec
library(Arc.krige)
?Arc.krige::tool_exec
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
?library
library(Arc.krige)
library(Arc.krige)
library(Arc.krige)
demo
demo(meuse)
library(gstat)
demo(meuse)
data(meuse)
library(sp)
demo(meuse)
meuse.area
class(meuse.area)
win = as.owin(meuse.area)
library(spatstat)
win = as.owin(meuse.area)
?as.owin
owin(meuse.area)
plot(meuse)
plot(meuse.area)
d1 = as.ppp(meuse)
class(meuse)
library(maptools)
owin(meuse.area)
win = as.owin(meuse.area)
win
class(win)
plot(win)
d1 = as.ppp(meuse)
d2 = density.ppp(d1,sigma = 70)
plot(d2)
plot(win)
`Window<-.ppp`()
`Window<-.ppp`(d2)
`Window<-.ppp`(win)
`Window<-.ppp`(d2,win)
?`window<-`
window(win)
is.owin(win)
window(win)
?window
library(raster)
d2
d3 = raster(d2)
plot(d3)
crop(d3,meuse.area)
d4 = crop(d3,meuse.area)
plot(d4)
plot(d3)
plot(d3)
plot(d2)
plot(d3)
plot(d2)
d3 = raster(d2)
plot(d3)
d4 = crop(d3,meuse.area)
plot(d4)
class(d3)
class(d4)
d3 == d4
d3 != d4
d3
d4
window(meuse.area)
plot(window(meuse.area))
plot(window(meuse.area,d3))
plot(window(meuse.area))
window(meuse.area)
meuse.area
window(meuse.area)
d3
plot(d3)
device = "windows"
library(maptools)
library(spatstat)
library(sp)
library(raster)
a = square(2)
a
class(a)
plot(a)
demo(meuse,echo = F)
b = as.owin(meuse.area)
plot(b)
class(b)
plot(a)
a = square(6)
plot(a)
a = square(6)
a
a = square(2)
a
c = infline(p = 1:3, theta = pi/4)
c
plot(c)
clip.infline(c,a)
a
plot(c)
plot(a)
plot(c)
clip.infline(c,a)
d = clip.infline(c,a)
plot(d)
class(d)
class(c)
d1 = as.ppp(meuse)
class(d1)
d2 = density.ppp(d1,sigma = 70)
class(d2)
plot(im)
plot(d2)
d3 = raster(d2)
plot(d3)
class(c)
clip.psp()
d4 = as.psp (d3)
d4 = as.psp (d2)
?psp
x=  psp(runif(10),window = owin)
x=  psp(runif(10),runif(10),window = owin)
x=  psp(runif(10),runif(10),runif(10),runif(10),window = owin)
x=  psp(runif(10),runif(10),runif(10),runif(10),window = c)
class(d)
d
class(d4)
class(d3)
plot(d3)
a
d1
class(b)
b1 = as.mask(b)
class(b1)
plot(b1)
unmask
unmask(b1)
x = crop(d3,b)
x = crop(d3,b1)
extend(1,2)
extend(1,2,4,5)
x = crop(d3,b)
x = crop(d3,meuse.area)
x
plot(x)
d3
plot(x)
plot(d3)
x = crop(d2,meuse.area)
writeOGR(meuse.area,".","meuse_area","ESRI Shapefile")
library(rgdal)
writeOGR(meuse.area,".","meuse_area","ESRI Shapefile")
class(meuse.area)
meuse_boundary = as(meuse.area,"SpatialPolygonsDataFrame")
meuse_boundary
plot(meuse_boundary)
writeOGR(meuse_boundary,".","meuse_area","ESRI Shapefile")
getwd()
y = as.owin(meuse_boundary)
y
plot(y)
?owin
r
d4
d3
owin(c(178605,181390),c(329714,333611),poly = b)
b
class(b)
meuse_boundary
owin(c(178605,181390),c(329714,333611),poly = meuse_boundary)
owin(c(178605,181390),c(329714,333611),poly = meuse.area)
r = raster(45,90)
r = raster(nrow = 45, ncol = 90)
r
class(r)
plot(r)
plot(r)
r[] = 1:ncell(r)
plot(r)
e = extent(-160,10,30,60)
rc = crop(r,e)
plot(e)
plot(r)
plot(rc)
plot(r)
plot(rc)
plot(r)
plot(rc)
plot(r)
plot(rc)
plot(r)
class(e)
rc = crop(r,meuse_boundary)
r = raster(nrow = 4500, ncol = 9000)
rc = crop(r,meuse_boundary)
r = raster(nrow = 45000, ncol = 90000)
rc = crop(r,meuse_boundary)
r = raster(nrow = 4500000, ncol = 9000000)
rc = crop(r,meuse_boundary)
plot(r)
d1
d2
class(d2)
class(d1)
d1 = as.ppp(d,window=meuse_boundary)
d1
class(d1)
class(meuse_boundary)
meuse.win = as.owin(meuse_boundary)
d1 = as.ppp(d,window=meuse.win)
d1
plot(d1)
d
d1 = as.ppp(meuse,window=meuse_boundary)
?ppp
?as.ppp
d1 = as.ppp(meuse,w=meuse_boundary)
d1 = as.ppp(meuse,W=meuse_boundary)
d1 = as.ppp(meuse)
d1
unmask(d1)
?ppp
d1 = as.ppp(meuse,W=meuse.win)
d1 = as.ppp(meuse,w=meuse.win)
ppp(meuse)
ppp(meuse$x )
city
data(city)
coordinates(meuse)
pts = coordinates(meuse)
p = ppp(pts[,1],pts[,2],window = meuse.win)
p
plot(p)
